# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

install_dependencies: &install_dependencies
  run:
      name: install dependencies
      command: |
        python3 -m venv venv
        . venv/bin/activate
        sudo pip install -e .
        sudo pip install setuptools green flake8 pyautoversion towncrier pytest twine==1.11
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - <<: *install_dependencies

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pytest --junitxml=test-reports/results.xml
            green

      - run:
          name: run static analysis
          command: |
            . venv/bin/activate
            flake8

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - store_test_results:
          path: test-reports

  release:
    docker:
      - image: circleci/python:3.7.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-
      - <<: *install_dependencies
      - run:
          name: autoversion
          command: |
            autoversion --config=scripts/autoversion.toml --release --news
      - run:
          name: Generate changelog
          command: towncrier --yes --name="" --version=$(cd ../../ && python setup.py --version)
          working_directory: docs/news
      - run:
          name: Tag and Release
          command: |
            python scripts/tag_and_release.py
      - store_artifacts:
          path: CHANGELOG.md
      - save_cache:
          paths:
            - ./venv
          key: v2-dependencies-{{ checksum "requirements.txt" }}
          
workflows:
  version: 2
  snippet_workflow:
    jobs:
      - build
      - release_gate:
          type: approval
          filters:
            branches:
              only: master
          requires:
            - build
      - release:
          requires:
            - release_gate
